/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mollusc.linguasubtitle;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import mollusc.linguasubtitle.subtitle.Subtitle;
import mollusc.linguasubtitle.subtitle.srt.SrtSubtitle;
import java.awt.Cursor;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.DefaultRowSorter;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.SwingUtilities;
import mollusc.linguasubtitle.db.ItemVocabulary;
import mollusc.linguasubtitle.db.Vocabulary;
import mollusc.linguasubtitle.subtitle.parser.Stem;

/**
 *
 * @author mollusc
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMain = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        loadSubtitle = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableStatistic = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        textSubtitle = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane2.setDividerLocation(350);

        jPanel2.setName(""); // NOI18N

        jScrollPane1.setMinimumSize(new java.awt.Dimension(0, 0));

        tableMain.setShowGrid(true);
        tableMain.setAutoCreateRowSorter(true);
        tableMain.setDefaultRenderer(Object.class, new CellRender());
        tableMain.setDefaultRenderer(Integer.class, new CellRender());
        tableMain.setDefaultRenderer(Boolean.class, new CheckBoxRenderer());
        tableMain.setDefaultEditor(Object.class, new mollusc.linguasubtitle.CellEditor());
        tableMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Имя", "Учу", "Знаю", "Слово", "Перевод", "Кол.", "Встречалось ранее"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableMain.setGridColor(new java.awt.Color(153, 153, 153));
        tableMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMain);
        tableMain.getColumnModel().getColumn(0).setPreferredWidth(40);
        tableMain.getColumnModel().getColumn(0).setMaxWidth(40);
        tableMain.getColumnModel().getColumn(1).setPreferredWidth(40);
        tableMain.getColumnModel().getColumn(1).setMaxWidth(40);
        tableMain.getColumnModel().getColumn(2).setPreferredWidth(50);
        tableMain.getColumnModel().getColumn(2).setMaxWidth(50);
        tableMain.getColumnModel().getColumn(3).setPreferredWidth(100);
        tableMain.getColumnModel().getColumn(4).setPreferredWidth(100);
        tableMain.getColumnModel().getColumn(5).setPreferredWidth(40);
        tableMain.getColumnModel().getColumn(5).setMaxWidth(40);
        tableMain.getColumnModel().getColumn(6).setPreferredWidth(50);
        tableMain.getColumnModel().getColumn(6).setMaxWidth(150);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel3.setMaximumSize(new java.awt.Dimension(516, 172));
        jPanel3.setMinimumSize(new java.awt.Dimension(516, 172));

        loadSubtitle.setText("Загрузить субтитры");
        loadSubtitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSubtitleActionPerformed(evt);
            }
        });

        tableStatistic.setShowGrid(true);
        tableStatistic.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tableStatistic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Общее количество слов", null, null},
                {"Количество неизвестных слов ", null, null},
                {"Количество известных слов", null, null},
                {"Количество изучаемых слов", null, null}
            },
            new String [] {
                "Параметр", "Уникальных", "Всего"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableStatistic.setGridColor(new java.awt.Color(153, 153, 153));
        jScrollPane4.setViewportView(tableStatistic);
        tableStatistic.getColumnModel().getColumn(1).setPreferredWidth(100);
        tableStatistic.getColumnModel().getColumn(1).setMaxWidth(150);
        tableStatistic.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableStatistic.getColumnModel().getColumn(2).setMaxWidth(150);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loadSubtitle)
                .addContainerGap())
            .addComponent(jScrollPane4)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadSubtitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane2.addTab("Обработка", jPanel1);

        jSplitPane2.setRightComponent(jTabbedPane2);

        textSubtitle.setEditable(false);
        jScrollPane2.setViewportView(textSubtitle);

        jSplitPane2.setLeftComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadSubtitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSubtitleActionPerformed
	JFileChooser fileopen = new JFileChooser();
	fileopen.setFileFilter(new SubtitleFilter());
	int ret = fileopen.showDialog(null, "Открыть");
	if (ret == JFileChooser.APPROVE_OPTION) {
	    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
	    File file = fileopen.getSelectedFile();
	    String pathSubtitle = file.getAbsolutePath();
	    if (pathSubtitle != null) {
		subtitle = null;
		Filename fn = new Filename(pathSubtitle, '/', '.');
		String extension = fn.extension().toLowerCase();
		if (extension.toLowerCase().equals("srt")) {
		    subtitle = new SrtSubtitle(pathSubtitle);
		}
		if (subtitle != null) {
		    if (loadSubtitle()) {
			loadTable();
		    }
		}
	    }
	    this.setCursor(Cursor.getDefaultCursor());
	}
    }//GEN-LAST:event_loadSubtitleActionPerformed

    private void tableMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMainMouseClicked
	if ( SwingUtilities.isRightMouseButton( evt ) ) {
	    Point p = evt.getPoint();
	    int colNumber = tableMain.columnAtPoint( p );
	    int rowNumber = tableMain.rowAtPoint( p );
	    if(colNumber == 3)
		highlightWord(rowNumber);
	}
	if ( SwingUtilities.isLeftMouseButton( evt ) ) {
	    Point p = evt.getPoint();
	    int colNumber = tableMain.columnAtPoint( p );
	    if(colNumber == 0 || colNumber == 1 || colNumber == 2)
		updateStatistic();
	}
    }//GEN-LAST:event_tableMainMouseClicked

    /**
     * Highlight selected word
     */
    public void highlightWord(int rowNumber) {
	textSubtitle.setContentType("text/html");
	    int row = tableMain.convertRowIndexToModel(rowNumber);
	    if (row != -1 && subtitle != null) {
		Stem stem = (Stem) tableMain.getModel().getValueAt(row, 3);
		String formatedText = subtitle.markWord(stem.getStem());
		textSubtitle.setText(formatedText);
		textSubtitle.setCaretPosition(subtitle.getPositionStem(stem
			.getStem()));
	}
    }
    
    private boolean loadSubtitle() {
        textSubtitle.setContentType("text/html");
        if (subtitle != null) {
            String formatedText = subtitle.hideHeader();
            textSubtitle.setText(formatedText);
            return true;
        }
        return false;
    }
    public void loadTable() {
	Map<Stem, Integer> stems = subtitle.getListStems();
        ((DefaultTableModel) tableMain.getModel()).setRowCount(0);
	DefaultTableModel tableModel = ((DefaultTableModel) tableMain.getModel());
	Vocabulary db = new Vocabulary("Vocabulary");
	db.createConnection();
	for (Stem key : stems.keySet()) {
	    ItemVocabulary item = db.getItem(key.getStem());
	    boolean remember = false;
	    boolean learning = false;
	    int meeting = 0;
	    String translate = "";
	    if(item != null)
	    {
		remember = item.remember;
		learning = item.learning;
		meeting = item.meeting;
		translate = item.translate;
		
		if (item.word.length() < key.getWord().length()) {
		    if (Character.isUpperCase(item.word.charAt(0))
			    && Character.isLowerCase(key.getWord().charAt(0))) {
			item.word = item.word.toLowerCase();
		    }
		    key.setWord(item.word);
		}
		if (Character.isUpperCase(key.getWord().charAt(0))
			&& Character.isLowerCase(item.word.charAt(0))) {
		    key.setWord(key.getWord().toLowerCase());
		}
	    }
	    tableModel.addRow(new Object[]{false, learning, remember, key, translate, stems.get(key), meeting});
	}

	db.closeConnection();
	tableDefaultSort();
	updateStatistic();
    }

    /**
     * Sort tableMain in the original condition
     */
    private void tableDefaultSort() {
	DefaultRowSorter sorter = ((DefaultRowSorter) tableMain.getRowSorter());
	ArrayList list = new ArrayList();
	list.add(new RowSorter.SortKey(2, SortOrder.ASCENDING));
	list.add(new RowSorter.SortKey(5, SortOrder.DESCENDING));
	list.add(new RowSorter.SortKey(6, SortOrder.ASCENDING));
	list.add(new RowSorter.SortKey(3, SortOrder.DESCENDING));
	sorter.setSortKeys(list);
	sorter.sort();
    }

    private void updateStatistic() {
	int totalWords = 0;
	int totalUnique = tableMain.getRowCount();
	
	int unknownWords = 0;
	int unknownUnique = 0;
	
	int knownWords = 0;
	int knownUnique = 0;
	
	int studyWords = 0;
	int studyUnique = 0;
	
	for (int i = 0; i < totalUnique; i++) {
	    boolean isName = (Boolean) tableMain.getValueAt(i, 0);
	    boolean isStudy = (Boolean) tableMain.getValueAt(i, 1);
	    boolean isKnown = (Boolean) tableMain.getValueAt(i, 2);
	    int count = (Integer) tableMain.getValueAt(i, 5);
	    totalWords += count;
	    
	    if(isKnown)
	    {
		knownUnique++;
		knownWords += count;
		continue;
	    }
	    
	    if(isStudy)
	    {
		studyUnique++;
		studyWords += count;
		continue;
	    }
	    
	    if(!isName && !isStudy && !isKnown)
	    {
		unknownUnique++;
		unknownWords += count;
		continue;
	    }
	}
	
	tableStatistic.setValueAt(totalUnique, 0, 1);
	tableStatistic.setValueAt(totalWords, 0, 2);
	
	tableStatistic.setValueAt(String.valueOf(unknownUnique) + " (" + String.format("%.1f", 100f * (float)unknownUnique / (float)totalUnique) + "%)", 1, 1);
	tableStatistic.setValueAt(String.valueOf(unknownWords) + " (" + String.format("%.1f", 100f * (float)unknownWords / (float)totalWords) + "%)", 1, 2);
	
	tableStatistic.setValueAt(String.valueOf(knownUnique) + " (" + String.format("%.1f", 100f * (float)knownUnique / (float)totalUnique) + "%)", 2, 1);
	tableStatistic.setValueAt(String.valueOf(knownWords) + " (" + String.format("%.1f", 100f * (float)knownWords / (float)totalWords) + "%)", 2, 2);
	
	tableStatistic.setValueAt(String.valueOf(studyUnique) + " (" + String.format("%.1f", 100f * (float)studyUnique / (float)totalUnique) + "%)", 3, 1);
	tableStatistic.setValueAt(String.valueOf(studyWords) + " (" + String.format("%.1f", 100f * (float)studyWords / (float)totalWords) + "%)", 3, 2);
	
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JButton loadSubtitle;
    private Subtitle subtitle;
    private javax.swing.JTable tableMain;
    private javax.swing.JTable tableStatistic;
    private javax.swing.JTextPane textSubtitle;
    // End of variables declaration//GEN-END:variables
}
